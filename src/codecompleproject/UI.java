/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codecompleproject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nadee
 */
public class UI extends javax.swing.JFrame {

    /**
     * Creates new form UI
     */
    public UI() {
        initComponents();
    }
int TCtCount =0;  
    int incrementForIf = 0;
                int incrementForOPerators = 0;
                int incrementForIterative = 0;
                int incrementForCatch = 0;
                int incrementForSwitch = 0;
                int countCatch = 0;
                int countCase = 0;
                int iLoop = 0;
                String line;
                String codeLine[] = null;
                
                Object[][] data;
                Object[][] data1;
                Object[][] data2;
                public  HashMap<Integer,Integer> valueArray = new HashMap<Integer, Integer>();;
                String[] lineArr;
                
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnInheritence = new javax.swing.JButton();
        btnCntrlStruct = new javax.swing.JButton();
        btnSize = new javax.swing.JButton();
        btnRecursive = new javax.swing.JButton();
        btnTotal = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnNested = new javax.swing.JButton();

        jButton3.setText("Calculate - SIZE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 60, 120, 40));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, 730, 30));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 960, 240));

        jLabel1.setText("Browse a File to Check the cde complexity");
        jLabel1.setPreferredSize(new java.awt.Dimension(400, 20));
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 360, 60));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Code Line", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 480, 950, 220));

        btnInheritence.setText("Calculate - INHERITANCE");
        btnInheritence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInheritenceActionPerformed(evt);
            }
        });
        jPanel1.add(btnInheritence, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 390, 180, 50));

        btnCntrlStruct.setText("Calculate - CONTROL STRUCTURE ");
        btnCntrlStruct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCntrlStructActionPerformed(evt);
            }
        });
        jPanel1.add(btnCntrlStruct, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 390, 230, 50));

        btnSize.setText("Calculate - SIZE");
        btnSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSizeActionPerformed(evt);
            }
        });
        jPanel1.add(btnSize, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 390, 130, 50));

        btnRecursive.setText("Calculate - RECURSIVE");
        btnRecursive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecursiveActionPerformed(evt);
            }
        });
        jPanel1.add(btnRecursive, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 390, 180, 50));

        btnTotal.setText("Total Calculation");
        btnTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTotalActionPerformed(evt);
            }
        });
        jPanel1.add(btnTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 710, 350, 40));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jTable2);

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 790, 940, 150));

        btnNested.setText("Calculate - NESTED");
        btnNested.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNestedActionPerformed(evt);
            }
        });
        jPanel1.add(btnNested, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 390, 170, 50));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 1250, 1020));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String filename = f.getAbsolutePath();
        jTextField1.setText(filename);

        try {
            FileReader reader = new FileReader(filename);
            BufferedReader br = new BufferedReader(reader);
            jTextArea1.read(br, null);
            br.close();
            jTextArea1.requestFocus();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
  
    }//GEN-LAST:event_jButton3ActionPerformed

    private void btnInheritenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInheritenceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnInheritenceActionPerformed

    private void btnSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSizeActionPerformed
        // TODO add your handling code here:
        lineArr = jTextArea1.getText().trim().split("\n");
        data = new Object[lineArr.length][2];
        String[] arithmeticArr2 = {"++", "--"};// put arithmetic operators to the array
        String[] relationalArr = {"==", "!="};
        String[] logicalArr = {"&&", "||", "~"};
        String[] miscellaneousArr = {",", "->", ".", "::"};
        String[] assgnOperatorsArr = {"+=", "-=", "*=", "/=", ">>>=", "|=", "&=", "%=", "<<=","^="};
        String[] manipulatorsArr = {"endln", "\n"};

        String[] bitwiseArr = {">>>", "<<<"};
        String[] bitwiseArr2 = {"<<", ">>"};
        String[] arithmeticArr1 = {"|", "+", "-", "*", "/", "%", ">", "<", "!", "^"};
        String[] equal = {"="};
        String[] extra ={">>=","<=", ">="};
        
        String keywords[] = { "abstract", "assert", "boolean",
                "break", "byte", "case", "catch", "char", "class", "const",
                "continue", "default", "do", "double", "extends", "false",
                "final", "finally", "float", "for", "goto", "if", "implements",
                "import", "instanceof", "int", "interface", "long", "native",
                "new", "null", "package", "private", "protected",
                "short", "strictfp", "super", "switch","number",
                "synchronized", "this", "throw", "throws", "transient", "true",
                "volatile", "while" };


        String[][] sampleArr = {arithmeticArr2, relationalArr, logicalArr, miscellaneousArr, assgnOperatorsArr, manipulatorsArr};

        for (int i = 0; i < lineArr.length; i++) {
            int count = 0;
            for (int j = 0; j < sampleArr.length; j++) {
                for (int k = 0; k < sampleArr[j].length; k++) {
                    String test = lineArr[i];
                    int index = lineArr[i].indexOf(sampleArr[j][k]);
                    while (index != -1) {
                        count++;
                        lineArr[i] = lineArr[i].substring(index + 1);
                        index = lineArr[i].indexOf(sampleArr[j][k]);
                    }
                    lineArr[i] = test;
                }
            }

            for (int m = 0; m < bitwiseArr2.length; m++) {
                String test = lineArr[i];
                int index = lineArr[i].indexOf(bitwiseArr2[m]);
                while (index != -1) {
                    if (index + 2 < lineArr[i].length() && (String.valueOf(lineArr[i].charAt(index + 2)).equalsIgnoreCase("=")
                            || String.valueOf(lineArr[i].charAt(index + 2)).equalsIgnoreCase(String.valueOf(bitwiseArr2[m].charAt(1))))) {
                        lineArr[i] = lineArr[i].substring(index + 2);
                        index = lineArr[i].indexOf(bitwiseArr2[m]);
                        continue;
                    } else {
                        count++;
                        lineArr[i] = lineArr[i].substring(index + 2);
                        index = lineArr[i].indexOf(bitwiseArr2[m]);
                    }
                }
                lineArr[i] = test;
            }

            for (int m = 0; m < bitwiseArr.length; m++) {
                String test = lineArr[i];
                int index = lineArr[i].indexOf(bitwiseArr[m]);
                while (index != -1) {
                    if (index + 3 < lineArr[i].length() && (String.valueOf(lineArr[i].charAt(index + 3)).equalsIgnoreCase("="))) {
                        lineArr[i] = lineArr[i].substring(index + 3);
                        index = lineArr[i].indexOf(bitwiseArr[m]);
                        continue;
                    } else {
                        count++;
                        lineArr[i] = lineArr[i].substring(index + 3);
                        index = lineArr[i].indexOf(bitwiseArr[m]);
                    }
                }
                lineArr[i] = test;
            }

            for (int m = 0; m < arithmeticArr1.length; m++) {
                Pattern pattern = Pattern.compile("[|<>=+-]");
                String test = lineArr[i];
                int index = lineArr[i].indexOf(arithmeticArr1[m]);
                while (index != -1) {
                    boolean b = false;
                    boolean c = false;
                    if (index + 1 < lineArr[i].length()) {
                        Matcher matcher = pattern.matcher(String.valueOf(lineArr[i].charAt(index + 1)));
                        b = matcher.find();
                    }
                    if (index - 1 > 0) {
                        Matcher matcher2 = pattern.matcher(String.valueOf(lineArr[i].charAt(index - 1)));
                        c = matcher2.find();
                    }
                    if(index == 0){
                        c = true;
                    }
                    if (b == true || c == true) {
                        lineArr[i] = lineArr[i].substring(index + arithmeticArr1[m].length());
                        index = lineArr[i].indexOf(arithmeticArr1[m]);
                        continue;
                    } else {
                        count++;
                        lineArr[i] = lineArr[i].substring(index + arithmeticArr1[m].length());
                        index = lineArr[i].indexOf(arithmeticArr1[m]);
                    }
                }
                lineArr[i] = test;
            }

            for (int m = 0; m < equal.length; m++) {
                Pattern pattern = Pattern.compile("[!@#$%^&*(),.?\":{}|<>+-=/]");
                String test = lineArr[i];
                boolean b=false;
                boolean c=false;
                int index = lineArr[i].indexOf(equal[m]);
                while (index != -1) {
                    if(index== 0){
                        b = false;
                    }else{
                    Matcher matcher = pattern.matcher(String.valueOf(lineArr[i].charAt(index - 1)));
                    b = matcher.find();
                     Matcher matcher2 = pattern.matcher(String.valueOf(lineArr[i].charAt(index + 1)));
                    c = matcher2.find();
                    
                    if(b == true || c ==true){
                        b =true;
                    }
                }
                    if (index - 1 > 0 && b == true) {
                        lineArr[i] = lineArr[i].substring(index + 2);
                        index = lineArr[i].indexOf(equal[m]);
                        continue;
                    } else {
                        count++;
                        lineArr[i] = lineArr[i].substring(index + 2);
                        index = lineArr[i].indexOf(equal[m]);
                    }
                }
                lineArr[i] = test;
            }
            
            
            for (int m = 0; m < keywords.length; m++) {
                String test = lineArr[i];
                int index = lineArr[i].indexOf(keywords[m]);
                while (index != -1) {
                        count++;
                        lineArr[i] = lineArr[i].substring(index + keywords[m].length());
                        index = lineArr[i].indexOf(keywords[m]);
                }
                lineArr[i] = test;
            }
            data[i][0] = lineArr[i];
            data[i][1] = count;
            System.out.println(lineArr[i] + " " + count);
        }

        Object[] columnNames = { "Code Line", " Cs Value"};
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        jTable1.setModel(model);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(100);
        // split the code line by line and assign them into a array
        //result.setVisible(true);

        
    }//GEN-LAST:event_btnSizeActionPerformed

    private void btnCntrlStructActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCntrlStructActionPerformed
        // TODO add your handling code here:
        lineArr = jTextArea1.getText().trim().split("\n");
        ArrayList<String>arrList = new ArrayList<>(Arrays.asList(lineArr)) ;
        data1 = new Object[lineArr.length][2];
        String condition1[] = {"if", "for", "while", "catch", "switch", "case"};
        int TCt = 0;
        TCtCount =0;  
                 incrementForIf = 0;
                incrementForOPerators = 0;
                incrementForIterative = 0;
                incrementForCatch = 0;
                incrementForSwitch = 0;
                countCatch = 0;
                countCase = 0;
                iLoop = 0;
                
                    for(iLoop = 0; iLoop < arrList.size(); iLoop++){
                           line = arrList.get(iLoop);
                           TCt = 0;
                           TCtCount =0;  
                incrementForIf = 0;
                incrementForOPerators = 0;
                incrementForIterative = 0;
                incrementForCatch = 0;
                incrementForSwitch = 0;
                countCatch = 0;
                countCase = 0;
                           //check for "if"
                           if(line.contains(condition1[0])){
                               TCt =0;
                                String tempString; 
                                int i = 0 ;
                                while(i <= line.length() - 2){
                                    tempString = String.valueOf(line.charAt(i) + String.valueOf(line.charAt(i+1)));
                                    System.out.println(tempString);
                                    if(tempString.equals("if")){
                                        incrementForIf++;
                                    }
                                    if(tempString.equals("&&") ||tempString.equals("||")){
                                        //System.out.println("Come .. to && or ||" );
                                        incrementForIf++;
                                        i += 2;
                                    }else if(line.charAt(i) == '&' || line.charAt(i) == '|'){
                                        System.out.println("Come .. to else if " );
                                        incrementForIf++;
                                        i++;
                                    }else
                                        i++;

                                }
                                System.out.println("Count value of if condition is" + incrementForIf );
                               
                                TCt +=incrementForIf ;
                                
                                
                            //check for "for or while"
                           }else if(line.contains(condition1[1]) || line.contains(condition1[2])){
                               TCt =0;
                               String tempString;
                               String newLine = line;
                               int i = 0;

                               while(i <= newLine.length() - 2){
                                   tempString = String.valueOf(newLine.charAt(i) + String.valueOf(newLine.charAt(i+1)));
                                   if(newLine.contains(condition1[1]) || newLine.contains(condition1[2])){
                                       newLine = newLine.replaceFirst("for", "");
                                       newLine = newLine.replaceFirst("while", "");
                                       incrementForIterative += 2;
                                       i+=2;
                                   }
                                   if(tempString.equals("&&")|| tempString.equals("||")){
                                       incrementForIterative += 2; 
                                       i+=2;
                                   }else if(newLine.charAt(i) == '&' || newLine.charAt(i) == '|'){ //go to above if n doesnt come to here check it....
                                        incrementForIterative +=2;
                                        i++;
                                   }else
                                        i++;


                                }
                                    System.out.println("Count value of incrementForIterative is " + incrementForIterative );
                                    
                                    TCt +=incrementForIterative;
                             //check for "Catch"
                           }else if(line.contains(condition1[3])){
                               TCt =0;
                               incrementForCatch++;
                               System.out.println("Count value is " + incrementForCatch );
                                TCt +=incrementForCatch;
                               
                            //check for switch   
                           }else if(line.contains(condition1[5])){
                               TCt =0;
                               incrementForSwitch++;
                               System.out.println("Count value is " + incrementForSwitch);
                               TCt +=incrementForSwitch;
                           }
                            System.out.println("Line wise Ct value   : " + TCt);
                            
                            data1[iLoop][0] = lineArr[iLoop];
                            data1[iLoop][1] = TCt;
                       }

        Object[] columnNames = { "Code Line", "Ctc Value"};
        DefaultTableModel model = new DefaultTableModel(data1, columnNames);
        jTable1.setModel(model);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(100);
        // split the code line by line and assign them into a array
        //result.setVisible(true);
        
        
    }//GEN-LAST:event_btnCntrlStructActionPerformed

    private void btnRecursiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecursiveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRecursiveActionPerformed

    private void btnTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTotalActionPerformed
    
       btnSize.doClick();
       btnCntrlStruct.doClick();
       btnTotal.doClick();
       Object[] columnNames = { "Code Lines", "Cs Value", "Ctc value", "nt value"};
    //   Object[] columnNames = { "Code Lines", "Cs Value", "Ctc value","Cnc Value","Ci","TW","Cps","Cr"};
        Object[][] total = new Object[lineArr.length][3];
        for(int i = 0; i<lineArr.length;i++){
            total[i][0] = lineArr[i];
            total[i][1] = data[i][1];
            total[i][2] = data1[i][1];
            total[i][3] = data2[i][1];
            //total[i][3] = valueArray.get(i);
        }
        DefaultTableModel model = new DefaultTableModel(total, columnNames);
        jTable2.setModel(model);
        jTable2.getColumnModel().getColumn(1).setMaxWidth(100);
    }//GEN-LAST:event_btnTotalActionPerformed

    private void btnNestedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNestedActionPerformed
        lineArr = jTextArea1.getText().trim().split("\n");
        for(int m=0;m<lineArr.length;m++){
            valueArray.put(m, 0);
        }
        count(jTextArea1.getText());
        
        System.out.println(valueArray);
        Object[][] data2 = new Object[lineArr.length][2];
        Object[] columnNames = { "Code Line", "Cnc Value"};
        for(int i = 0; i<lineArr.length;i++){
            data2[iLoop][0] = lineArr[iLoop];
            data2[iLoop][1] = valueArray.get(i);
        }
        DefaultTableModel model = new DefaultTableModel(data2, columnNames);
        jTable1.setModel(model);
        jTable1.getColumnModel().getColumn(1).setMaxWidth(100);
    }//GEN-LAST:event_btnNestedActionPerformed

    public void count(String codeText){
     int lineNum = 0;
     int sum = 0;
     String[] lines = codeText.split("\\r?\\n");
     for(int m = 0; m<lines.length;m++){

     }
     final String regex = "((?:(?:for|if|while)))\\s*\\s*\\(.*?.*\\)";
     final Pattern pattern = Pattern.compile(regex, Pattern.COMMENTS | Pattern.MULTILINE);

     for(int i=0; i < lines.length;) {
         final Matcher matcher = pattern.matcher(lines[i]);
         int count = 0;
         int max = 0;
         int count2 =0;
         boolean flag = false;

         if(matcher.find()) {
             System.out.println("Full match: " + matcher.group(0));
             ArrayList<Integer> linesArray= new ArrayList<Integer>();
             String temp = lines[i];
             outerloop:
             for (int j = i; j < lines.length;  j++) {
                 linesArray.add(i+count2);
                 count2++;
                 for (char ch : lines[j].toCharArray()) {
                     if (ch == '{') {
                         flag = true;
                         count++;
                         max++;
                     } else if (ch == '}' && flag) {
                         count--;
                         max++;
                     }

                     if (count == 0 && flag) {
                         break outerloop;
                     }
                 }

             }

             i+=count2-1;
             String methodBody="";
             for (Integer s : linesArray)
             {
                 valueArray.put(s, valueArray.get(s)+1);
                 methodBody += lines[s] + "\n";
             }

             final String regex2 = "((?:(?:for|if|while)\\s+)*)\\s*(\\w+)\\s*\\(.*?\\)\\s*(\\{(?:\\{[^\\{}]*\\}|.)*?\\})";
             final Pattern pattern2 = Pattern.compile(regex2, Pattern.DOTALL);
             Matcher matcher2 = pattern2.matcher(methodBody);
             if (matcher2.find()) {
                 count(matcher2.group(3));
             }

         }else{
             i++;
         }
     }
 }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCntrlStruct;
    private javax.swing.JButton btnInheritence;
    private javax.swing.JButton btnNested;
    private javax.swing.JButton btnRecursive;
    private javax.swing.JButton btnSize;
    private javax.swing.JButton btnTotal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
